// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/Lesson.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace LessonServer {
  public static partial class Lesson
  {
    static readonly string __ServiceName = "greet.Lesson";

    static readonly grpc::Marshaller<global::LessonServer.LessonModel> __Marshaller_greet_LessonModel = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::LessonServer.LessonModel.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::LessonServer.GetAllRequest> __Marshaller_greet_GetAllRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::LessonServer.GetAllRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::LessonServer.GetAllReply> __Marshaller_greet_GetAllReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::LessonServer.GetAllReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::LessonServer.DeleteLessonRequest> __Marshaller_greet_DeleteLessonRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::LessonServer.DeleteLessonRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::LessonServer.ResponseMessage> __Marshaller_greet_ResponseMessage = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::LessonServer.ResponseMessage.Parser.ParseFrom);

    static readonly grpc::Method<global::LessonServer.LessonModel, global::LessonServer.LessonModel> __Method_AddLesson = new grpc::Method<global::LessonServer.LessonModel, global::LessonServer.LessonModel>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddLesson",
        __Marshaller_greet_LessonModel,
        __Marshaller_greet_LessonModel);

    static readonly grpc::Method<global::LessonServer.GetAllRequest, global::LessonServer.GetAllReply> __Method_GetLessons = new grpc::Method<global::LessonServer.GetAllRequest, global::LessonServer.GetAllReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetLessons",
        __Marshaller_greet_GetAllRequest,
        __Marshaller_greet_GetAllReply);

    static readonly grpc::Method<global::LessonServer.DeleteLessonRequest, global::LessonServer.ResponseMessage> __Method_DeleteLesson = new grpc::Method<global::LessonServer.DeleteLessonRequest, global::LessonServer.ResponseMessage>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteLesson",
        __Marshaller_greet_DeleteLessonRequest,
        __Marshaller_greet_ResponseMessage);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::LessonServer.LessonReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Lesson</summary>
    [grpc::BindServiceMethod(typeof(Lesson), "BindService")]
    public abstract partial class LessonBase
    {
      public virtual global::System.Threading.Tasks.Task<global::LessonServer.LessonModel> AddLesson(global::LessonServer.LessonModel request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::LessonServer.GetAllReply> GetLessons(global::LessonServer.GetAllRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::LessonServer.ResponseMessage> DeleteLesson(global::LessonServer.DeleteLessonRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Lesson</summary>
    public partial class LessonClient : grpc::ClientBase<LessonClient>
    {
      /// <summary>Creates a new client for Lesson</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public LessonClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Lesson that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public LessonClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected LessonClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected LessonClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::LessonServer.LessonModel AddLesson(global::LessonServer.LessonModel request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddLesson(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::LessonServer.LessonModel AddLesson(global::LessonServer.LessonModel request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddLesson, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::LessonServer.LessonModel> AddLessonAsync(global::LessonServer.LessonModel request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddLessonAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::LessonServer.LessonModel> AddLessonAsync(global::LessonServer.LessonModel request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddLesson, null, options, request);
      }
      public virtual global::LessonServer.GetAllReply GetLessons(global::LessonServer.GetAllRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetLessons(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::LessonServer.GetAllReply GetLessons(global::LessonServer.GetAllRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetLessons, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::LessonServer.GetAllReply> GetLessonsAsync(global::LessonServer.GetAllRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetLessonsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::LessonServer.GetAllReply> GetLessonsAsync(global::LessonServer.GetAllRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetLessons, null, options, request);
      }
      public virtual global::LessonServer.ResponseMessage DeleteLesson(global::LessonServer.DeleteLessonRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteLesson(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::LessonServer.ResponseMessage DeleteLesson(global::LessonServer.DeleteLessonRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteLesson, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::LessonServer.ResponseMessage> DeleteLessonAsync(global::LessonServer.DeleteLessonRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteLessonAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::LessonServer.ResponseMessage> DeleteLessonAsync(global::LessonServer.DeleteLessonRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteLesson, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override LessonClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new LessonClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(LessonBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_AddLesson, serviceImpl.AddLesson)
          .AddMethod(__Method_GetLessons, serviceImpl.GetLessons)
          .AddMethod(__Method_DeleteLesson, serviceImpl.DeleteLesson).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, LessonBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_AddLesson, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::LessonServer.LessonModel, global::LessonServer.LessonModel>(serviceImpl.AddLesson));
      serviceBinder.AddMethod(__Method_GetLessons, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::LessonServer.GetAllRequest, global::LessonServer.GetAllReply>(serviceImpl.GetLessons));
      serviceBinder.AddMethod(__Method_DeleteLesson, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::LessonServer.DeleteLessonRequest, global::LessonServer.ResponseMessage>(serviceImpl.DeleteLesson));
    }

  }
}
#endregion
